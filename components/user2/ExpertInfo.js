import React, { useEffect, useState } from 'react';
import { View, StyleSheet, ScrollView, Alert } from 'react-native';
import { Avatar, Button, Card, Text, ActivityIndicator } from 'react-native-paper';
import { getCurrentUser, connectExpert, disconnectExpert, authApis, endpoints } from '../../configs/Apis'; // ƒê∆∞·ªùng d·∫´n tu·ª≥ v√†o project c·ªßa b·∫°n

const ExpertInfo = ({ navigation, token }) => {
  const [currentExpert, setCurrentExpert] = useState(null);
  const [loading, setLoading] = useState(true);
  const [availableExperts, setAvailableExperts] = useState([]);
  const [connectionId, setConnectionId] = useState(null);

 

  const loadExpert = async () => {
    setLoading(true);
    try {
      const api = authApis(token);
      const res = await api.get(endpoints['connection-list']);
      if (res.data.length > 0) {
        const connection = res.data[0];
        setCurrentExpert(connection.expert);
        setConnectionId(connection.id);
      } else {
        // 2. N·∫øu ch∆∞a c√≥ ‚Üí l·∫•y danh s√°ch user role Coach
        const resUsers = await api.get(endpoints['get-all-users']);
        const coaches = resUsers.data.filter(user => user.role === 3); // Coach = 2
        setAvailableExperts(coaches);
      }
    } catch (err) {
      console.error('L·ªói khi l·∫•y chuy√™n gia:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadExpert();
  }, []);

  const handleDisconnect = () => {
    Alert.alert('X√°c nh·∫≠n', 'B·∫°n mu·ªën ng·∫Øt k·∫øt n·ªëi v·ªõi chuy√™n gia?', [
      { text: 'H·ªßy' },
      {
        text: 'Ng·∫Øt k·∫øt n·ªëi',
        onPress: async () => {
          try {
            await disconnectExpert(token, connectionId);
            setCurrentExpert(null);
            setConnectionId(null);
            loadExpert();
          } catch (err) {
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ng·∫Øt k·∫øt n·ªëi');
          }
        },
      },
    ]);
  };

  const handleConnect = async (expert) => {
    Alert.alert('K·∫øt n·ªëi', `B·∫°n mu·ªën k·∫øt n·ªëi v·ªõi ${expert.name}?`, [
      { text: 'H·ªßy' },
      {
        text: 'K·∫øt n·ªëi',
        onPress: async () => {
          try {
            const connection = await connectExpert(token, expert.id);
            setCurrentExpert(connection.expert);
            setConnectionId(connection.id);
            setAvailableExperts([]);
          } catch (err) {
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi');
          }
        },
      },
    ]);
  };

  if (loading) return <ActivityIndicator style={{ marginTop: 50 }} />;

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {currentExpert ? (
        <Card style={styles.card}>
          <Card.Title
            title={currentExpert.name}
            subtitle={currentExpert.specialty || 'Chuy√™n gia'}
            left={() => (
              <Avatar.Image size={60} source={{ uri: currentExpert.avatar_url || 'https://i.pravatar.cc/150' }} />
            )}
          />
          <Card.Content>
            <Text>M√¥ t·∫£:</Text>
            <Text>{currentExpert.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</Text>
            <Text style={{ marginTop: 5 }}>
              üíº Kinh nghi·ªám: {currentExpert.experience || 0} nƒÉm
            </Text>
          </Card.Content>
          <Card.Actions style={styles.actions}>
            <Button mode="contained" onPress={() => navigation.navigate('ChatScreen')}>
              üí¨ Nh·∫Øn tin
            </Button>
            <Button onPress={handleDisconnect} textColor="red">
              ‚ùå Ng·∫Øt k·∫øt n·ªëi
            </Button>
          </Card.Actions>
        </Card>
      ) : (
        <View>
          <Text style={styles.noExpertText}>
            B·∫°n ch∆∞a k·∫øt n·ªëi v·ªõi chuy√™n gia n√†o. H√£y ch·ªçn 1 chuy√™n gia b√™n d∆∞·ªõi:
          </Text>
          {availableExperts.map((expert) => (
            <Card key={expert.id} style={styles.card}>
              <Card.Title
                title={expert.name}
                subtitle={expert.specialty || 'Chuy√™n gia'}
                left={() => (
                  <Avatar.Image size={50} source={{ uri: expert.avatar_url || 'https://i.pravatar.cc/150' }} />
                )}
              />
              <Card.Content>
                <Text>{expert.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</Text>
                <Text style={{ marginTop: 4 }}>
                  Kinh nghi·ªám: {expert.experience || 0} nƒÉm
                </Text>
              </Card.Content>
              <Card.Actions>
                <Button mode="contained" onPress={() => handleConnect(expert)}>
                  K·∫øt n·ªëi
                </Button>
              </Card.Actions>
            </Card>
          ))}
        </View>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  card: {
    marginBottom: 20,
  },
  actions: {
    justifyContent: 'space-between',
    marginTop: 10,
  },
  noExpertText: {
    fontSize: 18,
    marginBottom: 16,
    textAlign: 'center',
    color:'#B00000'
  },
});

export default ExpertInfo;
